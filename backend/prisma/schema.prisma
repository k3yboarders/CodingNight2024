generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  username            String               @unique
  email               String               @unique
  password            String
  role                Role                 @default(CHILD)
  fullName            String?
  avatar              Bytes?
  articles            Article[]
  bookmarkedArticles  BookmarkedArticle[]
  challenges          Challenge[]
  notes               Note[]
  userDailyChallenges UserDailyChallenge[]

  SleepRecord SleepRecord[]

  SleepAnalysis SleepAnalysis[]
}

model Article {
  id                 String              @id @default(uuid())
  title              String
  content            String
  authorId           String
  categoryId         String
  tags               String[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  author             User                @relation(fields: [authorId], references: [id])
  category           ArticleCategory     @relation(fields: [categoryId], references: [id])
  bookmarkedArticles BookmarkedArticle[]
}

model ArticleCategory {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
}

model BookmarkedArticle {
  id        String   @id @default(uuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, articleId])
}

model Quote {
  id        String   @id @default(uuid())
  content   String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Challenge {
  id          String   @id @default(uuid())
  title       String
  description String
  receiverId  String
  isDone      Boolean  @default(false)
  score       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  receiver    User     @relation(fields: [receiverId], references: [id])
}

model DailyChallenge {
  id                 String               @id @default(uuid())
  title              String
  description        String
  day                DateTime
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  UserDailyChallenge UserDailyChallenge[]
}

model UserDailyChallenge {
  id               String         @id @default(uuid())
  userId           String
  dailyChallengeId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  dailyChallenge   DailyChallenge @relation(fields: [dailyChallengeId], references: [id])
  user             User           @relation(fields: [userId], references: [id])
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String
  userId    String
  day       DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model SleepRecord {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  from      DateTime
  to        DateTime
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SleepAnalysis {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  from              DateTime
  to                DateTime
  generatedAnalysis String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum Role {
  CHILD
  PSYCHOLOGIST
}
