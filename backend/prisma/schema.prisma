generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  email         String         @unique
  password      String
  role          Role           @default(CHILD)
  fullName      String?
  avatar                Bytes?

  articles Article[]
  bookmarkedArticles BookmarkedArticle[]
  challenges Challenge[]
  userDailyChallenges UserDailyChallenge[]
  notes Note[]
}

model Article {
  id            String         @id @default(uuid())
  title         String
  content       String
  authorId      String
  author        User           @relation(fields: [authorId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  bookmarkedArticles BookmarkedArticle[]
}

model BookmarkedArticle {
  id            String         @id @default(uuid())
  userId        String
  articleId     String
  user          User           @relation(fields: [userId], references: [id])
  article       Article        @relation(fields: [articleId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Quote {
  id            String         @id @default(uuid())
  content       String
  author        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Challenge {
  id           String         @id @default(uuid())
  title        String
  description  String
  receiverId   String
  receiver     User           @relation(fields: [receiverId], references: [id])
  isDone       Boolean        @default(false)
  score        Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model DailyChallenge {
  id           String         @id @default(uuid())
  title        String
  description  String
  day          DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  UserDailyChallenge UserDailyChallenge[]
}

model UserDailyChallenge {
  id           String         @id @default(uuid())
  userId       String
  dailyChallengeId String
  user         User           @relation(fields: [userId], references: [id])
  dailyChallenge DailyChallenge @relation(fields: [dailyChallengeId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Note {
  id           String         @id @default(uuid())
  content      String
  userId       String
  day          DateTime
  user         User           @relation(fields: [userId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum Role {
  CHILD
  PSYCHOLOGIST
} 

